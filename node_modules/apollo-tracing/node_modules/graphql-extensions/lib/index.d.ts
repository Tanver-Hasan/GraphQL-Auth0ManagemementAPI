import { GraphQLSchema, GraphQLField, GraphQLResolveInfo } from 'graphql';
export declare type EndHandler = () => void;
export declare class GraphQLExtension<TContext = any> {
    requestDidStart?(): EndHandler | void;
    parsingDidStart?(): EndHandler | void;
    validationDidStart?(): EndHandler | void;
    executionDidStart?(): EndHandler | void;
    willResolveField?(source: any, args: {
        [argName: string]: any;
    }, context: TContext, info: GraphQLResolveInfo): ((result: any) => void) | void;
    format?(): [string, any] | undefined;
}
export declare class GraphQLExtensionStack<TContext = any> {
    private extensions;
    constructor(extensions: GraphQLExtension<TContext>[]);
    requestDidStart(): (() => void);
    parsingDidStart(): (() => void);
    validationDidStart(): (() => void);
    executionDidStart(): (() => void);
    willResolveField(source: any, args: {
        [argName: string]: any;
    }, context: TContext, info: GraphQLResolveInfo): (result: any) => void;
    format(): {};
    private handleDidStart(selectHandler);
}
export declare function enableGraphQLExtensions(schema: GraphQLSchema & {
    _extensionsEnabled?: boolean;
}): GraphQLSchema & {
    _extensionsEnabled?: boolean | undefined;
};
export declare type FieldIteratorFn = (fieldDef: GraphQLField<any, any>, typeName: string, fieldName: string) => void;
